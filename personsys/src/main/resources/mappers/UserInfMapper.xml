<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.own.mapper.UserInfMapper">
  <resultMap id="BaseResultMap" type="com.own.bean.UserInf">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="loginname" jdbcType="VARCHAR" property="loginname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="status_id" jdbcType="INTEGER" property="statusId" />
    <result column="createdate" jdbcType="TIMESTAMP" property="createdate" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="emp_id" jdbcType="INTEGER" property="empId" />
    <result column="che_id" jdbcType="INTEGER" property="cheId" />
    <result column="con_id" jdbcType="INTEGER" property="conId" />
    <result column="sal_id" jdbcType="INTEGER" property="salId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, loginname, password, email, status_id, createdate, username, emp_id, che_id, 
    con_id, sal_id
  </sql>
  <select id="selectByExample" parameterType="com.own.bean.UserInfExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_inf
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_inf
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.own.bean.UserInfExample">
    delete from user_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.own.bean.UserInf">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_inf (loginname, password, email, 
      status_id, createdate, username, 
      emp_id, che_id, con_id, 
      sal_id)
    values (#{loginname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{statusId,jdbcType=INTEGER}, #{createdate,jdbcType=TIMESTAMP}, #{username,jdbcType=VARCHAR}, 
      #{empId,jdbcType=INTEGER}, #{cheId,jdbcType=INTEGER}, #{conId,jdbcType=INTEGER}, 
      #{salId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.own.bean.UserInf">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_inf
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loginname != null">
        loginname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="statusId != null">
        status_id,
      </if>
      <if test="createdate != null">
        createdate,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="empId != null">
        emp_id,
      </if>
      <if test="cheId != null">
        che_id,
      </if>
      <if test="conId != null">
        con_id,
      </if>
      <if test="salId != null">
        sal_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loginname != null">
        #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="statusId != null">
        #{statusId,jdbcType=INTEGER},
      </if>
      <if test="createdate != null">
        #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="empId != null">
        #{empId,jdbcType=INTEGER},
      </if>
      <if test="cheId != null">
        #{cheId,jdbcType=INTEGER},
      </if>
      <if test="conId != null">
        #{conId,jdbcType=INTEGER},
      </if>
      <if test="salId != null">
        #{salId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.own.bean.UserInfExample" resultType="java.lang.Long">
    select count(*) from user_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
    <select id="findUserByUsernameAndPassword" resultType="com.own.bean.UserInf">
      select * from user_inf where loginname = #{username} and password= #{password}
    </select>
  <select id="selectByloginname" resultType="com.own.bean.UserInf">
    select * from user_inf where loginname = #{username}
  </select>
  <select id="selectAll" resultType="com.own.bean.UserInf">
    select * from user_inf
  </select>
  <select id="selectByEmail" resultType="com.own.bean.UserInf">
    select * from user_inf where email = #{email}
  </select>
  <select id="selectByCondition" resultType="com.own.bean.UserInf">
    select * from user_inf
    <where>
       <if test="type != null and type == 'loginname'">
         loginname like #{content}
       </if>
      <if test="type != null and type == 'username'">
          username like #{content}
      </if>
    </where>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_inf
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.loginname != null">
        loginname = #{record.loginname,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.statusId != null">
        status_id = #{record.statusId,jdbcType=INTEGER},
      </if>
      <if test="record.createdate != null">
        createdate = #{record.createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.empId != null">
        emp_id = #{record.empId,jdbcType=INTEGER},
      </if>
      <if test="record.cheId != null">
        che_id = #{record.cheId,jdbcType=INTEGER},
      </if>
      <if test="record.conId != null">
        con_id = #{record.conId,jdbcType=INTEGER},
      </if>
      <if test="record.salId != null">
        sal_id = #{record.salId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_inf
    set id = #{record.id,jdbcType=INTEGER},
      loginname = #{record.loginname,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      status_id = #{record.statusId,jdbcType=INTEGER},
      createdate = #{record.createdate,jdbcType=TIMESTAMP},
      username = #{record.username,jdbcType=VARCHAR},
      emp_id = #{record.empId,jdbcType=INTEGER},
      che_id = #{record.cheId,jdbcType=INTEGER},
      con_id = #{record.conId,jdbcType=INTEGER},
      sal_id = #{record.salId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.own.bean.UserInf">
    update user_inf
    <set>
      <if test="loginname != null">
        loginname = #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="statusId != null">
        status_id = #{statusId,jdbcType=INTEGER},
      </if>
      <if test="createdate != null">
        createdate = #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="empId != null">
        emp_id = #{empId,jdbcType=INTEGER},
      </if>
      <if test="cheId != null">
        che_id = #{cheId,jdbcType=INTEGER},
      </if>
      <if test="conId != null">
        con_id = #{conId,jdbcType=INTEGER},
      </if>
      <if test="salId != null">
        sal_id = #{salId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.own.bean.UserInf">
    update user_inf
    set loginname = #{loginname,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      status_id = #{statusId,jdbcType=INTEGER},
      createdate = #{createdate,jdbcType=TIMESTAMP},
      username = #{username,jdbcType=VARCHAR},
      emp_id = #{empId,jdbcType=INTEGER},
      che_id = #{cheId,jdbcType=INTEGER},
      con_id = #{conId,jdbcType=INTEGER},
      sal_id = #{salId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByLoginname">
    update user_inf set password = #{password} where loginname = #{loginname}
  </update>
</mapper>